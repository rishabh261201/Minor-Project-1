#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>

int codelen(char *code)
{
	int l=0;
	while(*(code+l)!='\0')
		l++;
	return l;
}


int fib(int n)
{
    if (n <= 1)
        return n;
    return fib(n - 1) + fib(n - 2);
}

int main()
{
    int choice;
    while (choice!=3)
    {
        printf("Choose Operation:\n");
        printf("1. Encode a file:\n");
        printf("2. Decode a file:\n");
        printf("3. exit:\n");
        scanf("%d",&choice);

        if(choice == 1)
        {
            char filename[] = "gray3232.bmp";

            int i,j,r,c;
            int data=0,offset,hbytes,width,height;
            long bmpsize=0,bmpdataoff=0,bpp=0;
            int **image;
            int temp=0;
            clock_t  start,end;
            double time_taken;

            //Reading the BMP File
            FILE *image_file;
            image_file = fopen(filename,"rb");
            if(image_file==NULL)
            {
                printf("Error Opening File!!");
                exit(1);
            }
            else
            {
                start = clock();
                printf("Processing BMP Header...\n\n");
                offset = 0; //Set file position to the beginning which contains the Signature or ID
                fseek(image_file,offset,SEEK_SET);
                printf("Getting file ID...\n\n");
                for(i=0;i<2;i++)
                {
                    fread(&data,1,1,image_file);
                    printf("%c",data);
                }
                printf("\n\nGetting size of BMP File...\n\n");
                fread(&bmpsize,4,1,image_file);
                printf("Size of the BMP File:: %ld bytes\n\n",bmpsize);

                printf("Setting offset to where the pixel arrray starts\n\n");
                offset = 10;
                fseek(image_file,offset,SEEK_SET);
                fread(&bmpdataoff,4,1,image_file);
                printf("Bitmap data offset:: %ld\n\n",bmpdataoff);

                printf("DIB Header\n\n");
                fread(&hbytes,4,1,image_file);

                printf("Number of bytes in header:: %d\n\n",hbytes);
                fread(&width,4,1,image_file);
                fread(&height,4,1,image_file);

                printf("Width of Image: %d\n",width);
                printf("Height of image: %d\n\n",height);

                fseek(image_file,2,SEEK_CUR);
                fread(&bpp,2,1,image_file);
                printf("Number of bits per pixel: %ld\n\n",bpp);

                printf("Setting offset to start of pixel data...\n\n");
                fseek(image_file,bmpdataoff,SEEK_SET);

                printf("Creating Image array...\n\n");
                image = (int **)malloc(height*sizeof(int *));
                for(i=0;i<height;i++)
                {
                    image[i] = (int *)malloc(width*sizeof(int));
                }
                //int image[height][width];
                int numbytes = (bmpsize - bmpdataoff)/3;
                printf("Number of bytes: %d \n\n",numbytes);
                printf("Reading the BMP File into Image Array...\n\n");
                for(r=0;r<height;r++)
                {
                    for(c=0;c<width;c++)
                    {
                        fread(&temp,3,1,image_file);
                        temp = temp&0x0000FF;
                        image[r][c] = temp;
                    }
                }
                printf("Image array allocated...\n\n");
                end = clock();
            }
            time_taken = ((double)(end-start))/CLOCKS_PER_SEC;
            printf("Time taken for reading BMP Image:: %f seconds\n\n",time_taken);
            fclose(image_file);

            //Printing Pixel Array
            for(r=0;r<height;r++){
                for(c=0;c<width;c++)
                        printf("%d ",image[r][c]);
                printf("\n");}

            //Finding the probability of occurence
            int hist[256];
            for(i=0;i<256;i++)
            {
                hist[i]=0;
            }
            for(i=0;i<height;i++) //making histogram which tells the number of times a pixel value has occured
            {
                for(j=0;j<width;j++)
                {
                    hist[image[i][j]]+=1;
                }
            }
    
            printf("Histogram: \n\n"); //( not printing histogram of 256 Values right now )

        //Finding number of non-zero occurences
            int nnz=0;
            for(i=0;i<256;i++)
            {
                if(hist[i]!=0)
                    nnz+=1;
            }
            // Calculating max length of code word
            float p = 1.0,ptemp;
            for(i=0;i<256;i++){
                ptemp = (hist[i]/(float)(height*width));
                if (ptemp>0 && ptemp<=p)
                    p = ptemp;
            }
            i = 0;
            while ((1 / p) > fib(i))
                i++;
            int maxcodelen = i-3;
            printf("Max Code len : %d\n\n",maxcodelen);

            //Defining Structures pixfreq
            struct pixfreq
            {
                int pix,larrloc,rarrloc;
                float freq;
                struct pixfreq *left, *right;
                char code[maxcodelen];
            };

            //Defining Huffman Code Structure
            struct huffcode
            {
                int pix,arrloc;
                float freq;
            };

            //Defining Huffman Tree Structure
            struct tree
            {
                int pix, larrloc,rarrloc;
                float freq;
                char code[maxcodelen];
            };
            //Declaring structs
            struct pixfreq *pix_freq;
            struct huffcode *huffcodes;
            struct tree *huffman_tree;
            int totalnnz = 2*nnz-1;
            int totpix = height*width;

            pix_freq = (struct pixfreq *)malloc(sizeof(struct pixfreq)*totalnnz);
            huffcodes = (struct huffcode *)malloc(sizeof(struct huffcode)*nnz);
            huffman_tree = (struct tree *)malloc(sizeof(struct tree)*totalnnz);

            j=0;
            float tempfreq;
            for(i=0;i<256;i++)
            {
                if(hist[i]!=0)
                {
                    huffcodes[j].pix = i;
                    pix_freq[j].pix = i;
                    huffman_tree[j].pix=i;
                    huffman_tree[j].larrloc=-1;
                    huffman_tree[j].rarrloc=-1;
                    huffcodes[j].arrloc = j;
                    tempfreq = (float)hist[i]/(float)totpix;
                    pix_freq[j].freq = tempfreq;
                    huffcodes[j].freq = tempfreq;
                    huffman_tree[j].freq = tempfreq;
                    pix_freq[j].left = NULL;
                    pix_freq[j].right = NULL;
                    pix_freq[j].code[0] = '\0';
                    huffman_tree[j].code[0]='\0';
                    j++;
                }
            }
            //Sorting the histogram
            struct huffcode temphuff;
            //Sorting w.r.t. probability of occurence
            for(i=0;i<nnz;i++)
            {
                for(j=i+1;j<nnz;j++)
                {
                    if(huffcodes[i].freq < huffcodes[j].freq)
                        {
                        temphuff = huffcodes[i];
                        huffcodes[i] = huffcodes[j];
                        huffcodes[j] = temphuff;
                        }
                }
            }

            //Displaying sorted Histogram
            for(i=0;i<nnz;i++)
                printf("%d --> %f\n",huffcodes[i].pix,huffcodes[i].freq);
            start = clock();
            //Building Huffman Tree
            float sumprob;
            int sumpix;
            int n=0,k=0,l=0;
            printf("nnz:: %d\n",nnz);
            int nextnode = nnz;
            while(n<nnz-1)
            {
                //Adding the lowest two probabilities
                sumprob = huffcodes[nnz-n-1].freq+huffcodes[nnz-n-2].freq;
                sumpix = huffcodes[nnz-n-1].pix+huffcodes[nnz-n-2].pix;
                i=0;
                //New position of the combined node
                while(sumprob<=huffcodes[i].freq)
                    i++;

                //Appending to the Heap Array
                pix_freq[nextnode].pix = sumpix;
                huffman_tree[nextnode].pix = sumpix;
                pix_freq[nextnode].freq = sumprob;
                huffman_tree[nextnode].freq = sumprob;
                pix_freq[nextnode].left = &pix_freq[huffcodes[nnz-n-2].arrloc];
                pix_freq[nextnode].right = &pix_freq[huffcodes[nnz-n-1].arrloc];
                huffman_tree[nextnode].larrloc = huffcodes[nnz-n-2].arrloc;
                huffman_tree[nextnode].rarrloc = huffcodes[nnz-n-1].arrloc;
                pix_freq[nextnode].code[0] = '\0';
                huffman_tree[nextnode].code[0]='\0';

                //Sorting the new array		
                for(k=nnz;k>=0;k--)
                {
                    if(k==i)
                    {
                        huffcodes[k].pix=sumpix;
                        huffcodes[k].freq=sumprob;
                        huffcodes[k].arrloc = nextnode;
                    }
                    else if(k>i)
                    {
                        huffcodes[k] = huffcodes[k-1];
                    }
                }
                n+=1;
                nextnode+=1;
            }
            end = clock();
            printf("Time taken for Building Huffman code:: %f seconds\n\n",((double)(end-start))/CLOCKS_PER_SEC);
            start = clock();
                //Assigning Code through backtracking -> Left for Encoding Later

            //Creating Graphical Tree [ USED HELP OF INTERNET TO UNDERSTAND HOW DOT FILES WORK ]
            printf("Creating DOT file for Huffman Tree visualization...\n\n");
            FILE *fp = fopen("huffman88.dot","wb");
            fprintf(fp,"digraph G {\n rotate = 180;\n ration=\"fill\";\n size = \"8.3,11.7!\";\n minlen=1.5;\n rankdir = LR;\n");
            k=0;
            for(i=totalnnz-1;i>=nnz;i--)
            {
                if(pix_freq[i].left!=NULL)
                {
                    fprintf(fp,"%s[color=green,fontcolor=red,labelfontsize=35];\n",pix_freq[i].code);
                    fprintf(fp,"%s -> %s [label=%f,color=green, fontcolor=red,labelfontsize=25];\n",pix_freq[i].code,pix_freq[i].left->code,pix_freq[i].left->freq);
                }
                if(pix_freq[i].right!=NULL)
                {
                    fprintf(fp,"%s -> %s [label=%f,color=green, fontcolor=red,labelfontsize=35];\n",pix_freq[i].code,pix_freq[i].right->code,pix_freq[i].right->freq);
                }
            }
            for(i=0;i<nnz;i++)
            {
                fprintf(fp,"%s [label = <%d<BR/>%s>,color=green,fontcolor=red,labelfontsize=35];\n",pix_freq[i].code,pix_freq[i].pix,pix_freq[i].code);
            }
            fprintf(fp,"{rank = same; ");
            for(i=0;i<nnz;i++)
                fprintf(fp,"%s; ",pix_freq[i].code);
            fprintf(fp,"}\n");
            fprintf(fp,"}\n");
            fclose(fp);
            printf("DOT File created...\n\nSaving to Image and PDF Files...\n\n");


            //LINUX COMMANDS  (Doesn't work on windows!! -> )
            printf("Saving the dot file as png file...\n\n");
            char commandpng[]="dot huffman88.dot -Tpng -o huffman88.png";
            system(commandpng);
            printf("Saving the dot file as pdf file...\n\n");
            char commandpdf[] = "dot huffman88.dot -Tpdf -o huffman88.pdf";
            system(commandpdf);

            printf("Save Complete...\n\n");
            break;
        }

        else if (choice == 2)
        {
            FILE *encoded_image = fopen("encoded_image.txt","rb");
            FILE *hufftree = fopen("hufftree.dat","rb");
            FILE *image_info = fopen("image_info.dat","rb");
            //Restoring basic information of the Image
            int i,nnz,totalnnz,maxcodelen,height,width;
            fread(&nnz,sizeof(int),1,image_info);
            fread(&height,sizeof(int),1,image_info);
            fread(&width,sizeof(int),1,image_info);
            totalnnz = 2*nnz-1;
            maxcodelen = ceil(log10(2*nnz)/log10(2))+1;	
            //Restoring the Tree	
            //Defining Structures pixfreq
            struct tree
            {
                int pix,larrloc,rarrloc;
                float freq;
                char code[maxcodelen];
            };
            //Declaring the Tree
            struct tree *huffman_tree;
            huffman_tree = (struct tree *)malloc(sizeof(struct tree)*totalnnz);
            int tree_size = sizeof(struct tree);
            for(i=0;i<totalnnz;i++)
                fread(&huffman_tree[i],tree_size,1,hufftree);
            //for(i=0;i<totalnnz;i++)
            //	printf("%d -> %s\n",pix_freq[i].pix,pix_freq[i].code);

            //Reading the BITSTREAM of the Encoded Image
            
            int **huffimage;
            char bit;
            char code[maxcodelen];
            char left = '0';
            char right = '1';
            huffimage = (int **)malloc(height*sizeof(int *));
            for(i=0;i<height;i++)
            {
                huffimage[i] = (int *)malloc(width*sizeof(int));
            }
            int r,c;
            struct tree currnode;
            //currnode = huffman_tree[totalnnz-1];
            printf("Decoding....\n\n");
            for(r=0;r<height;r++)
                for(c=0;c<width;c++)
                {
                    currnode = huffman_tree[totalnnz-1];
                    while(currnode.larrloc!=-1 && currnode.rarrloc!=-1)
                    {
                        fscanf(encoded_image,"%c",&bit);
                        if(bit==left)
                            currnode = huffman_tree[currnode.larrloc];
                        else
                            currnode = huffman_tree[currnode.rarrloc];
                    }
                    if(currnode.larrloc==-1 && currnode.rarrloc==-1)
                        huffimage[r][c] = currnode.pix;
                }
            
            printf("Writing to new Image...\n\n");
            FILE *newImage = fopen("newImage.pgm","wb");
            fprintf(newImage, "P5\n%d %d\n255\n", height, width);
            int tempval;
            for (r=0; r<height; r++)
            {
                for (c=0; c<width; c++)
                {
                    tempval = huffimage[r][c];
                    fwrite(&tempval,1,1, newImage);  // 0 .. 255
                }
            }
            printf("Writing to new Image done...\n\n");
            FILE *decImage = fopen("decoded_Image2.txt","wb");
            for(r=0;r<height;r++){
                for(c=0;c<width;c++)
                    fprintf(decImage,"%d ",huffimage[r][c]);
                fprintf(decImage,"\n");}
            fclose(decImage);
            fclose(encoded_image);
            fclose(hufftree);
            fclose(image_info);
            //fclose(newImage);
        }
        else if(choice == 3)
        {
                printf("Closing ...");
        }
        else{printf("Wrong Selection...\n\n");}
    }
}
